#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Sat Jun 18 23:52:17 2022
#

import wx
import psutil
import platform
from datetime import datetime
import json, configparser
import os, subprocess, time

from gpiozero import Button
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class mainFrame(wx.Frame):
    def __init__(self, *args, **kwds):

        
        self.config = configparser.ConfigParser()
        self.config.read('config.ini')

        self.buttonA = Button(self.config['system']['buttona'])
        self.buttonApressed = False
        self.buttonB = Button(self.config['system']['buttonb'])
        self.buttonBpressed = False
        
        # begin wxGlade: mainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.STAY_ON_TOP
        kwds["pos"] = (0,0)
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((480, 340))
        self.SetTitle("System UI")
        self.SetBackgroundColour(wx.Colour(67, 67, 67))

        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.panel_1.SetForegroundColour(wx.Colour(255, 255, 255))

        grid_sizer_1 = wx.FlexGridSizer(1, 3, 0, 0)

        grid_sizer_1.Add((5, 5), 0, 0, 0)

        sizer_2 = wx.FlexGridSizer(4, 1, 3, 5)
        grid_sizer_1.Add(sizer_2, 1, wx.EXPAND, 5)

        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "System"), wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 2)

        grid_sizer_3 = wx.FlexGridSizer(4, 2, 1, 1)
        sizer_3.Add(grid_sizer_3, 1, wx.ALL | wx.EXPAND, 2)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, " Name : ")
        label_1.SetForegroundColour(wx.Colour(255, 255, 255))
        label_1.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_3.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        grid_sizer_4 = wx.FlexGridSizer(1, 3, 1, 1)
        grid_sizer_3.Add(grid_sizer_4, 1, wx.EXPAND, 0)

        self.val_name = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_name.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_name.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_4.Add(self.val_name, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, " IP : ")
        label_3.SetForegroundColour(wx.Colour(255, 255, 255))
        label_3.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_4.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_ip = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_ip.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_ip.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_4.Add(self.val_ip, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, " Boot : ")
        label_2.SetForegroundColour(wx.Colour(255, 255, 255))
        label_2.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_3.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        grid_sizer_5 = wx.FlexGridSizer(1, 3, 1, 1)
        grid_sizer_3.Add(grid_sizer_5, 1, wx.EXPAND, 0)

        self.val_boot = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_boot.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_boot.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_5.Add(self.val_boot, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, " CPU Usage : ")
        label_4.SetForegroundColour(wx.Colour(255, 255, 255))
        label_4.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_5.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_cpu = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_cpu.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_cpu.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_5.Add(self.val_cpu, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_17 = wx.StaticText(self.panel_1, wx.ID_ANY, " Date : ")
        label_17.SetForegroundColour(wx.Colour(255, 255, 255))
        label_17.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_3.Add(label_17, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        grid_sizer_8 = wx.FlexGridSizer(1, 3, 1, 1)
        grid_sizer_3.Add(grid_sizer_8, 1, wx.EXPAND, 0)

        self.val_time = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_time.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_time.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_8.Add(self.val_time, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_18 = wx.StaticText(self.panel_1, wx.ID_ANY, " Temp : ")
        label_18.SetForegroundColour(wx.Colour(255, 255, 255))
        label_18.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_8.Add(label_18, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_temp = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_temp.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_temp.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_8.Add(self.val_temp, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_19 = wx.StaticText(self.panel_1, wx.ID_ANY, " Transferts : ")
        label_19.SetForegroundColour(wx.Colour(255, 255, 255))
        label_19.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_3.Add(label_19, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        grid_sizer_9 = wx.FlexGridSizer(1, 4, 1, 1)
        grid_sizer_3.Add(grid_sizer_9, 1, wx.EXPAND, 0)

        label_20 = wx.StaticText(self.panel_1, wx.ID_ANY, " Upload : ")
        label_20.SetForegroundColour(wx.Colour(255, 255, 255))
        label_20.SetFont(wx.Font(8, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_9.Add(label_20, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_upload = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_upload.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_upload.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_9.Add(self.val_upload, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_21 = wx.StaticText(self.panel_1, wx.ID_ANY, " Download : ")
        label_21.SetForegroundColour(wx.Colour(255, 255, 255))
        label_21.SetFont(wx.Font(8, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_9.Add(label_21, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_download = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_download.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_download.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_9.Add(self.val_download, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "Memory"), wx.HORIZONTAL)
        sizer_2.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 2)

        grid_sizer_6 = wx.FlexGridSizer(2, 4, 1, 1)
        sizer_4.Add(grid_sizer_6, 1, wx.ALL | wx.EXPAND, 2)

        label_5 = wx.StaticText(self.panel_1, wx.ID_ANY, " RAM : ")
        label_5.SetForegroundColour(wx.Colour(255, 255, 255))
        label_5.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_6.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_ram = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_ram.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_ram.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_6.Add(self.val_ram, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_6 = wx.StaticText(self.panel_1, wx.ID_ANY, " Usage : ")
        label_6.SetForegroundColour(wx.Colour(255, 255, 255))
        label_6.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_6.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_ram_pc = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_ram_pc.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_ram_pc.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_6.Add(self.val_ram_pc, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_7 = wx.StaticText(self.panel_1, wx.ID_ANY, " SWAP : ")
        label_7.SetForegroundColour(wx.Colour(255, 255, 255))
        label_7.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_6.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_swap = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_swap.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_swap.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_6.Add(self.val_swap, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_8 = wx.StaticText(self.panel_1, wx.ID_ANY, " Usage : ")
        label_8.SetForegroundColour(wx.Colour(255, 255, 255))
        label_8.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_6.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_swap_pc = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_swap_pc.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_swap_pc.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_6.Add(self.val_swap_pc, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "Hard Drives"), wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 1, wx.ALL | wx.EXPAND, 2)

        grid_sizer_7 = wx.FlexGridSizer(5, 4, 1, 1)
        sizer_5.Add(grid_sizer_7, 1, wx.ALL | wx.EXPAND, 2)

        label_9 = wx.StaticText(self.panel_1, wx.ID_ANY, " HOME : ")
        label_9.SetForegroundColour(wx.Colour(255, 255, 255))
        label_9.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_hdd0 = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_hdd0.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_hdd0.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_hdd0, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_10 = wx.StaticText(self.panel_1, wx.ID_ANY, " Usage : ")
        label_10.SetForegroundColour(wx.Colour(255, 255, 255))
        label_10.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_hdd0_pc = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_hdd0_pc.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_hdd0_pc.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_hdd0_pc, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_16 = wx.StaticText(self.panel_1, wx.ID_ANY, " HD 1 : ")
        label_16.SetForegroundColour(wx.Colour(255, 255, 255))
        label_16.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_hdd1 = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_hdd1.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_hdd1.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_hdd1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_13 = wx.StaticText(self.panel_1, wx.ID_ANY, " Usage : ")
        label_13.SetForegroundColour(wx.Colour(255, 255, 255))
        label_13.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_13, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_hdd1_pc = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_hdd1_pc.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_hdd1_pc.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_hdd1_pc, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_15 = wx.StaticText(self.panel_1, wx.ID_ANY, " HD 2 : ")
        label_15.SetForegroundColour(wx.Colour(255, 255, 255))
        label_15.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_hdd2 = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_hdd2.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_hdd2.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_hdd2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_12 = wx.StaticText(self.panel_1, wx.ID_ANY, " Usage : ")
        label_12.SetForegroundColour(wx.Colour(255, 255, 255))
        label_12.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_12, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_hdd2_pc = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_hdd2_pc.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_hdd2_pc.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_hdd2_pc, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_14 = wx.StaticText(self.panel_1, wx.ID_ANY, " HD 3 : ")
        label_14.SetForegroundColour(wx.Colour(255, 255, 255))
        label_14.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_hdd3 = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_hdd3.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_hdd3.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_hdd3, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_11 = wx.StaticText(self.panel_1, wx.ID_ANY, " Usage : ")
        label_11.SetForegroundColour(wx.Colour(255, 255, 255))
        label_11.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_hdd3_pc = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_hdd3_pc.SetForegroundColour(wx.Colour(53, 182, 255))
        self.val_hdd3_pc.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_hdd3_pc, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_22 = wx.StaticText(self.panel_1, wx.ID_ANY, " Total : ")
        label_22.SetForegroundColour(wx.Colour(255, 255, 255))
        label_22.SetFont(wx.Font(12, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_22, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_space = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_space.SetForegroundColour(wx.Colour(82, 209, 247))
        self.val_space.SetFont(wx.Font(12, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_space, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_23 = wx.StaticText(self.panel_1, wx.ID_ANY, " Usage : ")
        label_23.SetForegroundColour(wx.Colour(255, 255, 255))
        label_23.SetFont(wx.Font(12, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(label_23, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.val_space_pc = wx.StaticText(self.panel_1, wx.ID_ANY, "n/a")
        self.val_space_pc.SetForegroundColour(wx.Colour(82, 209, 247))
        self.val_space_pc.SetFont(wx.Font(12, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        grid_sizer_7.Add(self.val_space_pc, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.val_status = wx.StaticText(self.panel_1, wx.ID_ANY, " ")
        self.val_status.SetForegroundColour(wx.Colour(255, 255, 0))
        self.val_status.SetFont(wx.Font(8, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Courier New"))
        sizer_2.Add(self.val_status, 0, 0, 10)
        
        

        grid_sizer_1.Add((5, 5), 0, 0, 0) # replacement for code bottom
# 
#         grid_sizer_2 = wx.FlexGridSizer(4, 3, 0, 0)
#         grid_sizer_1.Add(grid_sizer_2, 1, wx.ALL | wx.EXPAND, 5)
# 
#         grid_sizer_2.Add((5, 5), 0, 0, 0)
# 
#         grid_sizer_2.Add((0, 0), 0, 0, 0)
# 
#         grid_sizer_2.Add((5, 5), 0, 0, 0)
# 
#         grid_sizer_2.Add((0, 0), 0, 0, 0)
# 
#         self.btn_poweroff = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.Bitmap("./ctrl-poweroff.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
#         self.btn_poweroff.SetMinSize((32, 32))
#         self.btn_poweroff.SetBackgroundColour(wx.Colour(67, 67, 67))
#         grid_sizer_2.Add(self.btn_poweroff, 0, wx.ALIGN_CENTER | wx.ALL, 5)
# 
#         grid_sizer_2.Add((0, 0), 0, 0, 0)
# 
#         grid_sizer_2.Add((0, 0), 0, 0, 0)
# 
#         self.btn_reboot = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.Bitmap("./ctrl-reboot.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
#         self.btn_reboot.SetMinSize((32, 32))
#         self.btn_reboot.SetBackgroundColour(wx.Colour(67, 67, 67))
#         grid_sizer_2.Add(self.btn_reboot, 0, wx.ALIGN_CENTER | wx.ALL, 5)
# 
#         grid_sizer_2.Add((0, 0), 0, 0, 0)
# 
#         grid_sizer_2.Add((5, 5), 0, 0, 0)
# 
#         grid_sizer_2.Add((0, 0), 0, 0, 0)
# 
#         grid_sizer_2.Add((5, 5), 0, 0, 0)
# 
        #grid_sizer_2.AddGrowableCol(1)

        grid_sizer_7.AddGrowableCol(1)
        grid_sizer_7.AddGrowableCol(3)

        grid_sizer_6.AddGrowableCol(1)
        grid_sizer_6.AddGrowableCol(3)

        grid_sizer_8.AddGrowableCol(0)
        grid_sizer_8.AddGrowableCol(2)

        grid_sizer_5.AddGrowableCol(0)
        grid_sizer_5.AddGrowableCol(2)

        grid_sizer_4.AddGrowableCol(0)
        grid_sizer_4.AddGrowableCol(2)

        grid_sizer_9.AddGrowableCol(1)
        grid_sizer_9.AddGrowableCol(3)

        grid_sizer_3.AddGrowableCol(1)

        sizer_2.AddGrowableCol(0)

        grid_sizer_1.AddGrowableRow(0)
        grid_sizer_1.AddGrowableCol(1)
        self.panel_1.SetSizer(grid_sizer_1)

        self.Layout()
        self.Centre()

        #self.Bind(wx.EVT_BUTTON, self.onPowerOff, self.btn_poweroff)
        #self.Bind(wx.EVT_BUTTON, self.onReboot, self.btn_reboot)
        
        self.statsLock=False
        self.showUpdate()
        self.getButtons()

        # end wxGlade

    def onPowerOff(self, event):  # wxGlade: mainFrame.<event_handler>
        self.val_status.SetLabel("Poweroff the device...")
        self.statsLock=True
        os.system(self.config['cli']['poweroff'])
        event.Skip()

    def onReboot(self, event):  # wxGlade: mainFrame.<event_handler>
        self.val_status.SetLabel("Reboot the device...")
        self.statsLock=True
        os.system(self.config['cli']['reboot'])
        event.Skip()

    def getSize(self,bytes, suffix="B"):
        """
        Scale bytes to its proper format
        e.g:
            1253656 => '1.20MB'
            1253656678 => '1.17GB'
        """
        factor = 1024
        for unit in ["", "K", "M", "G", "T", "P"]:
            if bytes < factor:
                return f"{bytes:.2f}{unit}{suffix}"
            bytes /= factor

    def getDate(self,type):
        if (type == "boot"):
            boot_time_timestamp = psutil.boot_time()
            bt = datetime.fromtimestamp(boot_time_timestamp)
            return f"{bt.year}/{bt.month}/{bt.day} {bt.hour}:{bt.minute}"
        elif (type == "now"):
            return datetime.now().strftime("%Y/%-m/%-d %-H:%-M")
        else:
            return "n/a"
        
    def getSys(self,type):
        if(type == "name"):
            uname = platform.uname()
            return f"{uname.node}"
        elif(type == "cpu_pc"):
            cpupc=psutil.cpu_percent()
            time.sleep(1)
            cpupc=psutil.cpu_percent()
            if(cpupc >=90):
                self.status=self.status+"Warning! Very High CPU usage. "
            elif(cpupc >=50):
                self.status=self.status+"High CPU usage. "
            else:
                self.status=self.status+"Device running normally. "
                pass
            return f"{cpupc}%"
        elif(type == "temp"):
            try:
                s = subprocess.check_output(["python",self.config['system']['path']+"temp/" + self.config['system']['home_sensor'] + "/" + self.config['system']['units'] + ".py"])
                if(s[0:2]!="-2"):
                    t=int(s[0:2])
                    if(t>=60):
                        self.status=self.status+"DANGER! TEMPERATURE IS TOO HIGH!!! "
                    elif(t>=50):
                        self.status=self.status+"Warning! The device temperature is very high. "                    
                    elif(t>=45):
                        self.status=self.status+"Warning! The device temperature is high. "
                    elif(t>=40):
                        self.status=self.status+"The device temperature is very high. "
                    elif(t<=10):
                        self.status=self.status+"The device temperature is very low. "
                    elif(t<=0):
                        self.status=self.status+"The device temperature is too low. "
                    else:
                        self.status=self.status+"Good temperature. "
                elif(s[0:2]=="-2"):
                    self.status=self.status+"Temperature read error. "
                else:
                    self.status=self.status+"Temperature module error. "
                return s.decode('utf-8').replace("\n","")
            except:
                return "n/a"
        elif(type == "net"):
            net = ""
            if_addrs = psutil.net_if_addrs()
            for interface_name, interface_addresses in if_addrs.items():
                for address in interface_addresses:
                    if(interface_name[0:3] == "eth" or interface_name[0:4] == "wlan"):
                        if str(address.family) == 'AddressFamily.AF_INET':
                            if(address.address != "0.0.0.0"):
                                net = f"{address.address}"
            if(net == ""):
                return "n/a"
            else:
                return net
        elif(type == "upload"):
            net_io = psutil.net_io_counters()
            return self.getSize(net_io.bytes_sent)
        elif(type == "download"):
            net_io = psutil.net_io_counters()
            return self.getSize(net_io.bytes_recv)
        else:
            return "n/a"
        
    def getRAM(self,type):
        mem = psutil.virtual_memory()
        if(type == "total"):
            return f"{self.getSize(mem.total)}"
        elif(type == "free"):
            return f"{self.getSize(mem.available)}"
        elif(type == "use"):
            return f"{self.getSize(mem.used)}"
        elif(type == "pc"):
            return f"{mem.percent}%"
        else:
            return "n/a"
        
    def getSWAP(self,type):
        mem = psutil.swap_memory()
        if(type == "total"):
            return f"{self.getSize(mem.total)}"
        elif(type == "free"):
            return f"{self.getSize(mem.free)}"
        elif(type == "use"):
            return f"{self.getSize(mem.used)}"
        elif(type == "pc"):
            return f"{mem.percent}%"
        else:
            return "n/a"
        
    def updateDrives(self):
        # get all disk partitions
        self.spaceTotal=0
        self.spaceFree=0
        self.spaceUse=0
        partitions = psutil.disk_partitions()
        for partition in partitions:
            if(partition.mountpoint == "/"):
                try:
                    partition_usage = psutil.disk_usage(partition.mountpoint)
                    self.val_hdd0.SetLabel(self.getSize(partition_usage.used) + "/" + self.getSize(partition_usage.total))
                    self.val_hdd0_pc.SetLabel(str(partition_usage.percent)+"%")
                except PermissionError:
                    # this can be catched due to the disk that
                    # isn't ready
                    continue
            elif(partition.mountpoint[0:8] == "/mnt/hdd"):
                try:
                    partition_usage = psutil.disk_usage(partition.mountpoint)
                    usage = self.getSize(partition_usage.used) + "/" + self.getSize(partition_usage.total)
                    percent = str(partition_usage.percent)+"%"
                    self.spaceTotal=(self.spaceTotal+partition_usage.total)
                    self.spaceUse=(self.spaceUse+partition_usage.used)
                    self.spaceFree=(self.spaceFree+partition_usage.free)
                    if(partition.mountpoint[5:] == "hdd1"):
                        self.val_hdd1.SetLabel(usage)
                        self.val_hdd1_pc.SetLabel(percent)
                    elif(partition.mountpoint[5:] == "hdd2"):
                        self.val_hdd2.SetLabel(usage)
                        self.val_hdd2_pc.SetLabel(percent)
                    elif(partition.mountpoint[5:] == "hdd3"):
                        self.val_hdd3.SetLabel(usage)
                        self.val_hdd3_pc.SetLabel(percent)
                    else:
                        print("Unknow drive "+ partition.mountpoint[5:])
                        
                except PermissionError:
                    # this can be catched due to the disk that
                    # isn't ready
                    continue
        if(self.spaceTotal != 0 and self.spaceUse != 0):
            self.spacePercent=((self.spaceUse * 100) / self.spaceTotal)
        else:
            self.spacePercent="0%"
        self.val_space.SetLabel(self.getSize(self.spaceUse)+"/"+self.getSize(self.spaceTotal))
        self.val_space_pc.SetLabel(str(round(self.spacePercent,1))+"%")
                
    def showUpdate(self):
        self.status=""
        self.val_name.SetLabel(self.getSys("name"))
        self.val_ip.SetLabel(self.getSys("net"))        
        self.val_upload.SetLabel(self.getSys("upload"))        
        self.val_download.SetLabel(self.getSys("download"))
        self.val_boot.SetLabel(self.getDate("boot"))
        self.val_time.SetLabel(self.getDate("now"))
        self.val_ram.SetLabel(self.getRAM("use")+"/"+self.getRAM("total"))
        self.val_ram_pc.SetLabel(self.getRAM("pc"))
        self.val_swap.SetLabel(self.getSWAP("use")+"/"+self.getSWAP("total"))
        self.val_swap_pc.SetLabel(self.getSWAP("pc"))
        self.updateDrives()
        self.val_cpu.SetLabel(self.getSys("cpu_pc"))
        self.val_temp.SetLabel(self.getSys("temp"))
        if(self.statsLock is False):
            self.val_status.SetLabel(self.status)
        wx.CallLater(2000, self.showUpdate)
        
    def getButtons(self):
        if self.buttonA.is_pressed and self.buttonApressed is not True:
            self.buttonApressed = True
            self.statsLock=True
            self.val_status.SetLabel("Reboot the device...")
            wx.CallLater(2000, os.system(self.config['cli']['reboot']))
        elif self.buttonA.is_pressed:
            pass
        else:
            self.buttonApressed = False
            
        if self.buttonB.is_pressed and self.buttonBpressed is not True:
            self.buttonBpressed = True
            self.statsLock=True
            self.val_status.SetLabel("Poweroff the device...")
            wx.CallLater(2000, os.system(self.config['cli']['poweroff']))
        elif self.buttonB.is_pressed:
            pass
        else:
            self.buttonBpressed = False
        wx.CallLater(1000, self.getButtons)
   
# end of class mainFrame

class mainUI(wx.App):
    def OnInit(self):
        self.frame = mainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class mainUI

if __name__ == "__main__":
    app = mainUI(0)
    app.MainLoop()
